# This is a basic workflow to help you get started with Actions

name: Build Specific Lambda Package and upload it to s3
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
    #branches: [ master , build-packages , lambda_builds ]
    #paths:
    #  - 'lambdas/**'
  # Allows you to run this workflow manually from the Actions tab
 workflow_dispatch:
    inputs:
      lambda_2build:
        required: true
        description: Please specify Lambda function path to build, usually lambdas/lambda_name


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-package:
    runs-on: ubuntu-latest
    steps:
      #- run: echo ${{secrets.AWS_ACCESS_KEY_ID_TEST}}
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: master
          submodules: true
      - name: Checkout Dependencies Repo
        uses: actions/checkout@v2
        with:
          repository: cmc-ai/payment-processor
          ref: main
          path: payment-processor
          token: ${{ secrets.IAC_PAT }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
      - name: Check if requirements.txt exist
        id: if_requirements_exist
        run: |
          if test -f "${{ github.event.inputs.lambda_2build }}/requirements.txt"; then
            echo "requirements.txt exists"
            echo "::set-output name=is_requirements_exist::1"
          else
            echo "::set-output name=is_requirements_exist::0"
          fi
      - name: Install dependencies with LambCI
        uses: docker://lambci/lambda:build-python3.8
        if: steps.if_requirements_exist.outputs.is_requirements_exist == 1
        with:
            entrypoint: pip
            args: install -r ${{ github.event.inputs.lambda_2build }}/requirements.txt --target ${{ github.event.inputs.lambda_2build }}/
      - id: get_lambda_name
        run: |
          lambda_name=$(echo ${{ github.event.inputs.lambda_2build }} | sed 's/.*\/\(.*\)$/\1/')
          echo "::set-output name=lambda_name::$lambda_name"
          echo "Lambda name is:$lambda_name"
      - name: Bundle function with dependencies
        run: |
            cd ${{ github.event.inputs.lambda_2build }}
            zip -r ../${{ steps.get_lambda_name.outputs.lambda_name }}.zip ./*

      - name: Copy function zip file to S3
        run: |
            filename=$(md5sum lambdas/${{ steps.get_lambda_name.outputs.lambda_name }}.zip | awk '{print $1}')
            aws s3 rm --recursive s3://katabat-chatbot-dev.ca-central-1.630063752049/builds/${{ steps.get_lambda_name.outputs.lambda_name }}/ --include "*.zip" || true
            aws s3 cp ${{ github.event.inputs.lambda_2build }}.zip s3://katabat-chatbot-dev.ca-central-1.630063752049/builds/${{ steps.get_lambda_name.outputs.lambda_name }}/$filename.zip

